rule prepare:
	input:
		"tb/data/meta.tsv",
		"tb/data/dropped_strains.txt",
		gzvcf = "tb/data/tb.vcf.gz",
		ref = "tb/data/MTB_ancestor_reference.fasta",
		strip = "tb/data/Locus_to_exclude_Mtb.txt"
	output:
		"tb/results/seqs.vcf.gz",
		"tb/results/meta.tsv",
		"tb/results/ref.fasta"
	shell:
		"python src/prepare_vcf.py --strip_loci {input.strip} --gzvcf {input.gzvcf} --ref {input.ref} --path tb"


rule tree:
	input:
		"tb/results/seqs.vcf.gz",
		"tb/results/meta.tsv",
		"tb/results/ref.fasta",
		drm = "tb/data/DRMs.txt"
	output:
		"tb/results/tree.nwk",
		"tb/results/tree.tsv",
		"tb/results/seq_gtr.txt",
		"tb/results/tree_nuc_aln.vcf"
	shell:
		"python src/build_tree.py --path tb --drm {input.drm} --timetree --iqtree --iqmodel TVM+R2 --vcf --nthreads 2"


rule translate:
	input:
		"tb/results/tree_nuc_aln.vcf",
		"tb/results/tree.tsv",
		gff = "tb/data/Mtb_H37Rv_NCBI_Annot.gff",
		genes = "tb/data/genes.txt"
	output:
		"tb/results/translation_reference.fasta",
		"tb/results/translation.vcf"
	shell:
		"python src/translate.py --path tb --vcf --assignMuts --genes {input.genes} --reference {input.gff}"
		#"python src/translate.py --path tb --vcf --assignMuts --reference {input.gff}"

rule mugration:
	input:
		"tb/results/tree.nwk",
		"tb/results/tree.tsv"
	output:
		"tb/results/region_gtr.txt",
		"tb/results/country_gtr.txt"
	shell:
		"python src/mugration.py --path tb --vcf --field country  &&"
		"python src/mugration.py --path tb --vcf --field lineage  &&"
		"python src/mugration.py --path tb --vcf --field region"

rule export:
	input:
		"tb/results/region_gtr.txt",
		"tb/results/country_gtr.txt",
		"tb/results/tree.tsv",
		"tb/results/tree_nuc_aln.vcf",
		gff = "tb/data/Mtb_H37Rv_NCBI_Annot.gff"
	output:
		"tb/auspice/tb_tree.json",
		"tb/auspice/tb_meta.json"
		#"tb/auspice/tb_sequences.json",
		#"tb/auspice/tb_entropy.json"
	shell:
		"python src/export_to_auspice.py --vcf --path tb --prefix tb --reference {input.gff}"

